package com.baisebreno.learning_spring_api.api.exceptionhandler;

import com.fasterxml.jackson.annotation.JsonInclude;
import lombok.Builder;
import lombok.Getter;



/**
 * A Problem Details payload for HTTP APIs, implementing the structure defined by
 * <a href="https://datatracker.ietf.org/doc/html/rfc7807">RFC 7807</a>.
 * <p>
 * RFC 7807 specifies a standard JSON object to convey machine-readable error details:
 * <ul>
 *   <li><b>type</b> (string, URI): A URI reference that identifies the problem type. When dereferenced,
 *       it may provide human-readable documentation for the problem type.</li>
 *   <li><b>title</b> (string): A short, human-readable summary of the problem type.</li>
 *   <li><b>status</b> (number): The HTTP status code generated by the origin server for this occurrence of the problem.</li>
 *   <li><b>detail</b> (string): A human-readable explanation specific to this occurrence of the problem.</li>
 *   <li><b>instance</b> (string, URI): A URI reference that identifies the specific occurrence of the problem
 *       (optional; not included here by default but can be added as an extension).</li>
 * </ul>
 *
 * <p>
 * This implementation:
 * <ul>
 *   <li>Provides the core members: {@link #type}, {@link #title}, {@link #status}, and {@link #detail}.</li>
 *   <li>Omits {@code instance} by default, but RFC 7807 explicitly allows custom extensions.</li>
 *   <li>Adds {@link #userMessage} as an <i>extension member</i> for a friendly, client-facing message
 *       that you can render directly to end users without exposing technical details.</li>
 *   <li>Uses {@code @JsonInclude(Include.NON_NULL)} so absent fields are not serialized.</li>
 *   <li>Uses Lombok {@code @Getter} and {@code @Builder} for an immutable, fluent construction style.</li>
 * </ul>
 *
 * <h3>Example JSON</h3>
 * <pre>{@code
 * {
 *   "type": "https://example.com/problems/resource-not-found",
 *   "title": "Resource not found",
 *   "status": 404,
 *   "detail": "The resource /orders/123 does not exist.",
 *   "userMessage": "We couldn't find what you were looking for."
 * }
 * }</pre>
 *
 * <h3>Usage</h3>
 * Typically returned from a Spring {@code @ControllerAdvice} / {@code ResponseEntityExceptionHandler}
 * to provide consistent, standards-compliant error responses.
 *
 * <p><b>Note:</b> If you want full RFC coverage, consider adding an {@code instance} field (URI of this error occurrence),
 * and optionally an application-specific {@code traceId} or {@code timestamp} as additional extension members.
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@Getter
@Builder
public class Problem {

    private Integer status;
    private String type;
    private String title;
    private String detail;

    private String userMessage;


}
